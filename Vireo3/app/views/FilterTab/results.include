*{
This include displays the results table for the ListTab or the LogTab. 

This include is mostly written in groovy instead of using template tags because
there is a substantial performance improvement by using all groovy for the
loops over results. This makes the file harder to maintain but much quicker 
in results.
}*

#{if results != null && results.getResults() != null }
<table id="results-table" class="table table-striped table-bordered table-condensed">
    <thead>
        <tr>
        %{
        def routeArgs = new java.util.HashMap<String,String>();
        routeArgs.put("nav",nav);
        String modifySearchUrl = play.mvc.Router.reverse("FilterTab.modifySearch",routeArgs).url;
		def colWidth = 100 / columns.size();
        for(org.tdl.vireo.search.SearchOrder column : columns) {
            if (orderby == column) {
                out.print("<th style='width:"+colWidth+"%' class=\"orderby selected " + ((direction == ASCENDING) ? "ascending" : "descending") +"\">");
                out.print("<a href=\""+modifySearchUrl+"?direction=toggle\">")
                out.print(play.i18n.Messages.get(nav.toUpperCase() + "_COLUMN_"+column.name()));
                out.print("</a>");
                out.print("</th>");
            } else {
                out.print("<th style='width:"+colWidth+"%'>");
                out.print("<a href=\""+modifySearchUrl+"?orderby="+column.getId()+"\">")
                out.print(play.i18n.Messages.get(nav.toUpperCase() + "_COLUMN_"+column.name()));
                out.print("</a>");
                out.print("</th>");
            }
        } // for columns
        }%
        </tr>
    </thead>
    <tbody>
        %{
        int sql = 0;
        String viewTabUrl = play.mvc.Router.reverse("ViewTab.view").url;
        
        def navArgs = new HashMap<String,Object>();
        navArgs.put("nav",nav);
        String modifyFilterURL = play.mvc.Router.reverse("FilterTab.ModifyFilters",navArgs).url;
        
        
        for(def object : results.getResults()) {
                      
           def sub = null;
           def log = null;
           if (object instanceof org.tdl.vireo.model.Submission) {
              sub = object;
           } else {
              log = object;
              sub = log.getSubmission();
           }
           
           if("log".equals(nav)) {
           		if(log.isPrivate()) {
           			out.print("<tr class='private'>");
           		}
           } else {
           		out.print("<tr>");
           }
           
           for(org.tdl.vireo.search.SearchOrder column : columns) {
           
           	 out.print("<td>");
             if (column == columns.get(0)) {
	             if ("log".equals(nav)) {
	             	out.print("<a class=\"exclude\" href=\""+modifyFilterURL+"?action=add&type=exclude_log&value="+log.getId()+"\"><i class=\"_icon-ban-circle\"></i></a>");
	             } else {          
	             	out.print("<a class=\"exclude\" href=\""+modifyFilterURL+"?action=add&type=exclude_sub&value="+sub.getId()+"\"><i class=\"_icon-ban-circle\"></i></a>");    
	             }
             }
           
             out.print("<a href=\""+viewTabUrl+"/"+sub.getId()+"\">");

             switch (column) {
                 case ID:
                     if ("log".equals(nav)) {
                        // For action log show the log's id, not the submission's id.
                        out.print(log.getId());
                     } else {          
                        out.print(sub.getId());                        
                     }
                     break;
                case STUDENT_EMAIL:
                     if (sub.getSubmitter() != null && sub.getSubmitter().getEmail() != null) {
                        out.print(sub.getSubmitter().getEmail());
                     }
                     break;
                 case STUDENT_NAME:
                     out.print(sub.getStudentFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH));
                     break;
                 case STUDENT_ID:
                     if (sub.getSubmitter() != null && sub.getSubmitter().getInstitutionalIdentifier() != null) {
                        out.print(sub.getSubmitter().getInstitutionalIdentifier());
                     }
                     break;   
                 case STATE:
                     if ("log".equals(nav)) {
                         // For action logs, show the state at the time the log was made.
                         if (log.getSubmissionState() != null)
                             out.print(log.getSubmissionState().getDisplayName());
                     } else {
                         if (sub.getState() != null)
                             out.print(sub.getState().getDisplayName());
                     }
                     break;
                 case ASSIGNEE:
                     if ("log".equals(nav)) {
                         if (log.getPerson() != null) 
                             out.print(log.getPerson().getFormattedName(org.tdl.vireo.model.NameFormat.FIRST_LAST));
                     } else {
                         if (sub.getAssignee() != null)
                             out.print(sub.getAssignee().getFormattedName(org.tdl.vireo.model.NameFormat.FIRST_LAST));
                     }
                     break;
                 case DOCUMENT_TITLE:
                     if (sub.getDocumentTitle() != null)
                         out.print(sub.getDocumentTitle());
                     break;
                 case DOCUMENT_ABSTRACT:
                     if (sub.getDocumentAbstract() != null)
                         out.print(sub.getDocumentAbstract()?.nl2br());
                     break;
                 case DOCUMENT_KEYWORDS:
                     if (sub.getDocumentKeywords() != null)
                        out.print(sub.getDocumentKeywords());
                     break;
                 case DOCUMENT_SUBJECTS:
                     if (sub.getDocumentSubjects() != null)
                        for(String subject : sub.getDocumentSubjects()) 
                            out.print("<p>"+subject+"</p>");
                     break;
                 case DOCUMENT_LANGUAGE:
                     if (sub.getDocumentLanguage() != null) {
                        def locale = null;
                        try {
                            locale = org.apache.commons.lang.LocaleUtils.toLocale(sub.getDocumentLanguage());
                        } catch (RuntimeException re) { /* ignore */ }
                        if ( locale != null) {
                            out.print(locale.getDisplayName());
                        } else {
                            out.print(sub.getDocumentLanguage());
                        }
                     }
                     break;
                 case PUBLISHED_MATERIAL:
                     if (sub.getPublishedMaterial() != null)
                        out.print("Yes - " + sub.getPublishedMaterial()?.nl2br());
                     else
                        out.print("No");
                     break;
                 case PRIMARY_DOCUMENT:
                     if (sub.getPrimaryDocument() != null)
                        out.print(sub.getPrimaryDocument().getName());
                     break;
                 case GRADUATION_DATE:
                     String monthName = null;
                     if (sub.getGraduationMonth() != null && sub.getGraduationMonth() >= 0 && sub.getGraduationMonth() <= 11)
                        monthName = new java.text.DateFormatSymbols().getMonths()[sub.getGraduationMonth()]; 
                     if (sub.getGraduationYear() != null)
                        out.print(sub.getGraduationYear());
                     if (monthName != null)
                        out.print(" "+monthName);
                     break;
                 case DEFENSE_DATE:
                 	if (sub.getDefenseDate() != null)
                 		out.print(sub.getDefenseDate().format('MM/dd/yyyy'));
                 	break;
                 case SUBMISSION_DATE:
                     if (sub.getSubmissionDate() != null)
                        out.print(sub.getSubmissionDate().format('MM/dd/yyyy'));
                     break;
                 case LICENSE_AGREEMENT_DATE:
                     if (sub.getLicenseAgreementDate() != null)
                        out.print(sub.getLicenseAgreementDate().format('MM/dd/yyyy'));
                     break;
                 case APPROVAL_DATE:
                     if (sub.getApprovalDate() != null)
                        out.print(sub.getApprovalDate().format('MM/dd/yyyy'));
                     break;                      
                 case COMMITTEE_APPROVAL_DATE:
                     if (sub.getCommitteeApprovalDate() != null)
                        out.print(sub.getCommitteeApprovalDate().format('MM/dd/yyyy'));
                     break;                          
                 case COMMITTEE_EMBARGO_APPROVAL_DATE:
                     if (sub.getCommitteeEmbargoApprovalDate() != null)
                        out.print(sub.getCommitteeEmbargoApprovalDate().format('MM/dd/yyyy'));
                     break;                          
                 case COMMITTEE_MEMBERS:
                     for (org.tdl.vireo.model.CommitteeMember member : sub.getCommitteeMembers()) {
                     	out.print("<p>");
                        out.print(member.getFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST));  
                        if (member.getRoles().size() > 0) {
                        	out.print(" ("+member.getFormattedRoles()+")");
                        }
                        out.print("</p>");
                     }
                     break;
                 case COMMITTEE_CONTACT_EMAIL:
                     if (sub.getCommitteeContactEmail() != null)
                        out.print(sub.getCommitteeContactEmail());
                     break;
                 case DEGREE:
                     if (sub.getDegree() != null)
                         out.print(sub.getDegree());
                     break;
                 case DEGREE_LEVEL:
                     if (sub.getDegreeLevel() != null)
                         out.print(sub.getDegreeLevel().name());
                     break;
                 case PROGRAM:
                 	 if (sub.getProgram() !=null)
                 	 	 out.print(sub.getProgram());
                 	 break;
                 case COLLEGE:
                     if (sub.getCollege() != null)
                         out.print(sub.getCollege());
                     break;
                 case DEPARTMENT:
                     if (sub.getDepartment() != null)
                         out.print(sub.getDepartment());
                     break;
                 case MAJOR:
                     if (sub.getMajor() != null)
                         out.print(sub.getMajor());
                     break;
                 case EMBARGO_TYPE:
                     if (sub.getEmbargoTypes().size() > 0)
                     	for(org.tdl.vireo.model.EmbargoType embargo : sub.getEmbargoTypes())
                               out.print("<p>" + embargo.getName() + ( embargo.getGuarantor() != org.tdl.vireo.model.EmbargoGuarantor.DEFAULT ? " (" + embargo.getGuarantor() + ")" : "") + " " + ( embargo.isSystemRequired() ? "<em class=\"icon-globe\"></em>" : "<em class=\"icon-user\"></em>") + "</p>");
                     break;
                 case DOCUMENT_TYPE:
                     if (sub.getDocumentType() != null)
                         out.print(sub.getDocumentType());
                     break;
                 case UMI_RELEASE:
                     if (sub.getUMIRelease() != null) {
                        if (sub.getUMIRelease()) {
                            out.print("Yes");
                        } else {
                            out.print("No");
                        }
                     }
                     break;
                 case CUSTOM_ACTIONS:
                     String sActions = "";
                     for (org.tdl.vireo.model.jpa.JpaCustomActionDefinitionImpl systemAction : actions) {
                     	def found = false;
	                    for (org.tdl.vireo.model.CustomActionValue subAction : sub.getCustomActions()) {
	                    	if(systemAction.equals(subAction.getDefinition())) {
	                    		sActions += "<input type=\"checkbox\" class=\"checkbox custom-action\" disabled=\"disabled\" checked=\"checked\"/> " + subAction.getDefinition().getLabel();
	                    		found = true;
	                    	}
	                    }
	                    if(!found){
	                    	sActions += "<input type=\"checkbox\" class=\"checkbox custom-action\" disabled=\"disabled\"/> " + systemAction.getLabel();
	                    }
	                    sActions += "<br/>";
                     }
                     out.print(sActions);
                     break;
                 case DEPOSIT_ID:
                     if (sub.getDepositId() != null)
                         out.print(sub.getDepositId());
                     break;
                 case REVIEWER_NOTES:
                     if (sub.getReviewerNotes() != null)
                         out.print(sub.getReviewerNotes()?.nl2br());
                     break;
                 case LAST_EVENT_ENTRY:
                     if ("log".equals(nav)) {
                        out.print(log.getEntry());
                        if(log.isPrivate()) {
                        	out.print("<b> - [private]</b>");
                        }
                     } else {
                         if (sub.getLastLogEntry() != null)
                             out.print(sub.getLastLogEntry());
                     }
                     break;
                 case LAST_EVENT_TIME:
                     if ("log".equals(nav)) {
                        out.print(log.getActionDate().format("MM/dd/yyyy hh:mm:ss a"));
                     } else {
                         if (sub.getLastLogDate() != null)
                             out.print(sub.getLastLogDate().format("MM/dd/yyyy hh:mm:ss a"));
                     }
                     break;
                 case ORCID:
                 	if (sub.getOrcid() != null)
                 		out.print(sub.getOrcid());
                     break;

                     
             } // switch (column)
             out.print("</a></td>");
           } // for columns
           out.print("</tr>");
        } // for results.getResults()
        }%
        <tr>
            <td class="comments" colspan="${columns.size()}">
               ${results.getTotal()} matching records displayed on ${(int) ((results.getTotal() / results.getLimit()) +1)} pages (${results.getLimit()} per page).
            </td>
        </tr>
    </tbody>
</table>
<div class="pagination">
  <ul>
    %{
      List pagination = results.getPagination(7);
    }%
    
    #{if results.getOffset() - results.getLimit() >= 0 }
    <li><a href="@{FilterTab.modifySearch(nav)}?offset=${ results.getOffset() - results.getLimit() }">Prev</a></li>
    #{/if}
    #{else}
    <li class="disabled"><a href="#">Prev</a></li>
    #{/else}
    
    #{if pagination.get(0).pageNumber > 1}
    <li class="disabled"><a href="#">...</a></li>
    #{/if}
    
    #{list items:pagination, as:'page'}
    <li #{if page.current == true}class="active"#{/if}>
      <a href="@{FilterTab.modifySearch(nav)}?offset=${ page.offset }">${page.pageNumber}</a>
    </li>
    #{/list}
    
     #{if pagination.get(pagination.size()-1).pageNumber < results.getTotal() / results.getLimit() }
    <li class="disabled"><a href="#">...</a></li>
    #{/if}
    
    #{if results.getOffset() + results.getLimit() < results.getTotal() }
    <li><a href="@{FilterTab.modifySearch(nav)}?offset=${ results.getOffset() + results.getLimit() }">Next</a></li>
    #{/if}
    #{else}
    <li class="disabled"><a href="#">Next</a></li>
    #{/else}
    
     </ul>
</div>
#{/if}
#{elseif indexer.isJobRunning() }
%{
    float complete = 0;
    if (indexer.getCurrentJobTotal() > 0)
        complete = (((float) indexer.getCurrentJobProgress()) / indexer.getCurrentJobTotal()) * 100;
                        
    String completeString = String.format("%.3f%%",complete);
}%

<div class="alert alert-warning">
<p><strong>Searching is currently unavailable</strong></p>
<p>The index is currently being rebuilt and the rebuilding process searching is disabled. The rebuild is ${completeString} complete.</p>
</div>
#{/elseif}
#{else}
<div class="alert alert-error">
<p><strong>Searching is currently unavailable</strong></p>
<p>The search index is either corrupted, or is otherwise inaccessible. Please contact your system administrator to rebuild the search index or restore access.</p>
</div>
#{/else}
