<?xml version="1.0" encoding="utf-8" standalone="no"?>
*{
    This is very generic Dublin Core format. This is meant to be Vireo's
    example of a repository agnostic format. However in practice I doubt this
    would be ingestable by any repository implementation without modification.
    
    http://dublincore.org/specifications/
    
    This format has not been well tested, if you have a problem with it then it
    is probably a bug. Please fit it. 
}*
<metadata
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:dcterms="http://purl.org/dc/terms/">

    <!-- dc.creator = Student -->
	<dc:creator>
	    ${ sub.getStudentFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH)?.escapeXml()?.raw() }
	</dc:creator>
	
	<!-- dc.title = Document Title -->
	#{if sub.getDocumentTitle() != null } 
	<dc:title>
	    ${ sub.getDocumentTitle()?.escapeXml()?.raw() }
	</dc:title>
	#{/if}
	
	<!-- dc.description.abstract = Document Abstract -->
	#{if sub.getDocumentAbstract() != null } 
	<dc:description xsi:type="dcterms:abstract">
	dim:field mdschema="dc" element="description" qualifier="abstract">
	    ${ sub.getDocumentAbstract()?.escapeXml()?.raw() }
	</dc:description>
	#{/if}
	
	<!-- dc.subject = Document Keywords, split on ";" (multiple) -->
	#{if sub.getDocumentKeywords() != null } 
	#{list items:sub.getDocumentKeywords().split(";"), as:'keyword'} 
	<dc:subject>
	    ${ keyword.trim()?.escapeXml()?.raw() }
	</dc:subject>
	#{/list}
	#{/if}
	
	<!-- dc.contributor.advisor = Committee Members, both chairs and members included (Multiple) -->
	#{list items:sub.getCommitteeMembers(), as:'member'}
	#{if member.hasNoRole() || member.hasRole("Chair","Co-Chair","Supervisor","Co-Supervisor","Advisor") } 
	<dc:contributor>
	   ${ member.getFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH)?.escapeXml()?.raw() }
	</dc:contributor>
	#{/if}
	#{/list}
	
	
	<!-- dc.date = Graduation date in "YYYY-MM" format -->
	#{if sub.getGraduationYear() != null } 
	<dc:date>
		%{
		    out.print(sub.getGraduationYear());
		    if (sub.getGraduationMonth() != null) {
		        out.print("-");
		        // Jaunary=0, December=11
		        out.print(String.format("%02d",sub.getGraduationMonth()+1));
		    }
		}% 
	</dc:date>
	#{/if}
	
	<!-- dc.date.dateAccepted = Approval date in "YYYY-MM-DD" format -->
	#{if sub.getApprovalDate() != null } 
	<dc:date" xsi:type="dcterms:dateAccepted">
	    ${ sub.getApprovalDate().format("yyyy-MM-dd") }
	</dc:date>
	#{/if}
	
	
	<!-- dc.format = Primary Document's mimetype, almost always "application/pdf" -->
	#{if sub.getPrimaryDocument() != null } 
	<dc:format>
	    ${ sub.getPrimaryDocument().getMimeType()?.escapeXml()?.raw() }
	</dc:format>
	#{/if}
	
	<!-- dc.language = Document Language -->
    #{if sub.getDocumentLanguage() != null }
    <dc:language>${ sub.getDocumentLanguage()?.escapeXml()?.raw() }</dc:language>
    #{/if}
	
	<!-- dc.type.text = "thesis" // constant -->
	<dc:type xsi:type="dcterm:text">thesis</dc:type>
	
	<!-- dc.identifier.uri == Deposit ID, this would only be available when re-depositing -->
	#{if sub.getDepositId() != null } 
	<dc:identifier xsi:type="dcterms:URI">
	    ${ sub.getDepositId()?.escapeXml()?.raw() }
	</dc:identifier>
	#{/if}
	
</metadata>